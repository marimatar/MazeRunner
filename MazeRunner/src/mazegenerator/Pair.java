package mazegenerator;/* represents an index in our mazegenerator.UF array as a row/column pair
* I don't recommend using this to represent the locations of objects
* in the Maze, since this mazegenerator.Pair is written for use with the union-find algorithm
* (which keeps track of locations as indexes, not row-column pairs)
*
* ====================
* DO NOT EDIT THIS FILE
* ====================
* */

import java.util.Objects;

public class Pair {
    private int row;
    private int column;
    private int index;


    public Pair(int index, int columns){
        this.row = index / columns;
        this.column = index % columns;
        this.index = index;
    }

    public Pair(int row, int column, int columns){
        this.row = row;
        this.column = column;
        this.index = column + row * columns;
    }

    public int getRow() {
        return row;
    }

    public int getColumn() {
        return column;
    }

    public int getIndex() {
        return index;
    }

    public String toString(){
        return "index: " + index + ": (" + row + "," + column + ")";
    }


    public static void testIndex(int index, int columns){
        System.out.println(new Pair(index, columns));
    }

    public static void testCoordinates(int row, int column, int columns){
        System.out.println(new Pair(row, column, columns));

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Pair pair = (Pair) o;
        return row == pair.row &&
                column == pair.column &&
                index == pair.index;
    }

    @Override
    public int hashCode() {
        return Objects.hash(row, column, index);
    }

    public static void main(String[] args) {
        System.out.println("test index:");
        for (int i = 0; i < 9; i++){
            testIndex(i, 3);
        }
        System.out.println("====================");

        for (int row = 0; row < 3; row++){
            for (int column = 0; column < 3; column++){
                testCoordinates(row, column, 3);
            }
        }
    }

}
